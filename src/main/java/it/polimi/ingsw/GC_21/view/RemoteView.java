package it.polimi.ingsw.GC_21.view;import java.awt.Insets;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.io.PrintStream;import java.net.Socket;import java.util.Scanner;import java.util.ArrayList;import java.util.ResourceBundle.Control;import org.json.simple.parser.ParseException;import org.omg.CORBA.Current;import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;import org.omg.PortableServer.AdapterActivator;import it.polimi.ingsw.GC_21.ACTION.Action;import it.polimi.ingsw.GC_21.ACTION.CouncilPlacement;import it.polimi.ingsw.GC_21.ACTION.CraftAction;import it.polimi.ingsw.GC_21.ACTION.CraftPlacement;import it.polimi.ingsw.GC_21.ACTION.ExcommAction;import it.polimi.ingsw.GC_21.ACTION.MarketPlacement;import it.polimi.ingsw.GC_21.ACTION.TowerPlacement;import it.polimi.ingsw.GC_21.BOARD.Board;import it.polimi.ingsw.GC_21.BOARD.Color;import it.polimi.ingsw.GC_21.BOARD.CraftType;import it.polimi.ingsw.GC_21.CLIENT.ChooseActionMessage;import it.polimi.ingsw.GC_21.CLIENT.RmiClient;import it.polimi.ingsw.GC_21.CLIENT.RmiClientInterface;import it.polimi.ingsw.GC_21.CLIENT.StartMessage;import it.polimi.ingsw.GC_21.GAMECOMPONENTS.DevCardType;import it.polimi.ingsw.GC_21.GAMEMANAGEMENT.Game;import it.polimi.ingsw.GC_21.PLAYER.FamilyMember;import it.polimi.ingsw.GC_21.PLAYER.FamilyMemberColor;import it.polimi.ingsw.GC_21.PLAYER.PersonalBoard;import it.polimi.ingsw.GC_21.PLAYER.Player;import it.polimi.ingsw.GC_21.UTILITIES.Observable;import it.polimi.ingsw.GC_21.UTILITIES.P2SObserver;import it.polimi.ingsw.GC_21.UTILITIES.CurrentObserver;import it.polimi.ingsw.GC_21.controller.Controller;import it.polimi.ingsw.GC_21.controller.ControllerForm;import it.polimi.ingsw.GC_21.controller.ControllerManager;import it.polimi.ingsw.GC_21.controller.LoginController;public class RemoteView extends Observable<Action> implements P2SObserver, CurrentObserver, Runnable {	private Game game;	private Player player;	private AdapterConnection adapterConnection;	private String username;	private AdapterView adapterView;	private ObjectOutputStream oos;	// in the declaration of remote View we create the controller passing the	// controller manager	public RemoteView(AdapterConnection adapter, ControllerManager controllerManager) throws IOException {		this.adapterConnection = adapter;		Controller controller = new Controller(this, controllerManager);		FileOutputStream out = new FileOutputStream("save.ser");		oos = new ObjectOutputStream(out);	}	@Override	public void run() {		StartMessage startMessage = new StartMessage();		adapterConnection.sendObject(startMessage);		inputObject();	}	public void inputObject() {		InputForm inputFromView = adapterConnection.receiveObject();		inputFromView.execute(this);	}			public void response(Action action) {		boolean result = this.notifyObservers(action);		if (result == false) {			adapterConnection.out("Oh bischero! Something went wrong! Try again!");			//this.input();			return;		}		adapterConnection.out("Everything went fine!");		return;	}	public String getUsername() {		return username;	}	public void setUsername(String username) {		this.username = username;	}	public Game getGame() {		return game;	}	public void setGame(Game game) {		this.game = game;	}	public Player getPlayer() {		return player;	}	public void setPlayer(Player player) {		this.player = player;	}	public AdapterConnection getAdapter() {		return adapterConnection;	}	public void setAdapter(AdapterConnection adapter) {		this.adapterConnection = adapter;	}	public AdapterView getAdapterView() {		return adapterView;	}	public void setAdapterView(AdapterView adapterView) {		this.adapterView = adapterView;	}	@Override	public void updateTurn() {		game.attachCurrent(this);		Board board = game.getBoard();		ChooseActionMessage chooseAction = new ChooseActionMessage("\n Your resources: "				+ player.getMyPersonalBoard().toString() + "\n" + board.toString(), board, player);		adapterConnection.sendObject(chooseAction);		inputObject();	}	@Override	public void updateExcomm() {		adapterConnection.out("Bergoglio wants to know if you have been a great guy recently! \n"				+ "Be careful: if you disappoint him you will get a permanent malus!!!"				+ "\nDo you want to be excommunicated? Y - N");		String choiche = adapterConnection.in();		switch (choiche) {		case "Y":			this.notifyObservers(new ExcommAction(player, game, true));		case "N":			this.notifyObservers(new ExcommAction(player, game, false));		default:			this.notifyObservers(new ExcommAction(player, game, false));		}	}	@Override	public void update(String string) {		adapterConnection.out(string);	}	@Override	public boolean update(Object change) {		return true;	}	@Override	public void updateControllerManager(String string) {		// TODO Auto-generated method stub	}	@Override	public boolean updateMessage(ControllerForm message) {		return true;	}	@Override	public void updateInit() {		// TODO Auto-generated method stub	}	@Override	public void updateCurrent(InputForm inputFromView) {		inputFromView.execute(this);	}	@Override	public void updateString(String comunication) {		adapterConnection.out(comunication);	}	@Override	public void updateExcomm(ExcommInput excommInput) {		excommInput.execute(this);	}	public void serialize() {		try {			oos.writeObject(game);		} catch (IOException e) {			adapterConnection.out("IO Error");			serialize();		}	}}